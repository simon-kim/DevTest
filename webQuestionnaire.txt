HTML

1) The following usage of the anchor element is technically valid HTML5. It 
doesn't really make much semantic sense, but in HTML5 (and not previous versions) 
the following code would make the entire header clickable and route to whatever is 
located in "/path/to/something". Again, it doesn't really make sense but is still 
technically valid HTML5.

2) The browser alert would show up after styles.css is done loading. This is because 
nothing is rendered until all stylesheets are downloaded. Scripts block rendering of all 
DOM elements below the script tag in the page, so if it was called before styles.css, the 
entire page would be blocked from rendering. This is why in most cases scripts are loaded 
as low in the page as possible. It is possible, however, for the alert to show up after the 
stylesheet has STARTED to load.

3) Some limitations include the e-mail being considered spam because of JavaScript and certain 
HTML elements, interference based on conflicting CSS selectors from the styles used on the site, 
different layout engines implementing HTML differently, and images not being displayed automatically 
due to security reasons.

Some elements you can't use include <script>, <embed>, <param>, and forms. You also have to use inline 
styles and attributes for nearly everything in e-mail. This causes the problem of not allowing a 
separation of structure from presentation. Other issues that limit styling include not being able to 
render CSS as well as you wanted to as well as not having all of your images load up properly. You are 
also restricted from videos and have to rely on the TABLE layout to keep things in your mail intact.

4.1) The article element should be used when trying to represent a self-contained composition. This 
includes, but is not limited to, forum posts, newspaper articles, blog entries, and user submitted 
comments. It typically is used independent compositions that still make sense outside of its context.

4.2) The use of section actually seems quite limited since there are more specific alternatives, such 
as div, article, and nav. However, it can be appropriately used for content that you could store as its 
own record in a database. Each section should have some sort of identification, usually in the header of 
the section element.

4.3) Nav is generally used to represent parts of a page that links to other pages or other parts within 
the page. It should be used for major navigation, such as links in the header and/or footer.

4.4) Aside should be used strictly for stand-alone content that is related to the content, such as an article, 
in context. The aside is related to the content but does not need to be part of the article body as it can be 
understood without the extra information.

4.5) The figure element is used to create additional mark up on diagrams, pictures, and code examples. This can 
include additional images, captions, links, and audio.

CSS

1) Geckos will be green in color and have a normal font-weight.

2) Yes, pic.jpg will be requested from the server because it does not have a direct path.

3) The span element will be pulled to the left by 5 pixels.

4) I would get the #below paragraph to be displayed below the two floated elements by first making the display 
of the #below paragraph an inline-block. Then, I would simply add a margin-top, for example 50px, and if needed, 
center the text by using the margin-left property. The code sample would look like this:

#below {
    display: inline-block;
    margin-top: 50px;
    margin-left: 40%;
}

JavaScript/jQuery

1) 334

2) 3 and 1 respectively.

3) 

$("button").click(function() {
  $(this).fadeOut(2000, function() {
    alert("Done.");
  });
});

PHP

1) Based on my reading and research, an SQL injection occurs when an application takes user data as an input 
and a malicious user places crafted data in order to "scout" the database. The malicious user is then able to 
find the right input to exploit the situation and use it to cause the input to be interpreted as part of a SQL 
query instead of data. In many cases, the SQL query results in the authentication process to be bypassed which 
then allows loss of data integrity and confidentiality as well as a compromise in the entire network.

In order to prevent SQL injections from occuring, you can first assume all user-submitted data is evil. Don't trust 
it and always validate and clean everything. You can also get rid of any database functionality you don't really 
need in order to prevent a malicious user from taking advantage of it. You should avoid connecting your database 
to an account with admin-level privileges unless absolutely necessary and you should always encrypt and hash any 
confidential data. Change passwords frequently and avoid using dynamic SQL by using prepared statements or 
parameterized queries.

2) In my attempts to translate this into JavaScript styled code, this would look like:

if (1 + 1 === 3) {
  console.log("I\'m positive I can\'t math");
} else {
  console.log("I\'m not sure I can math");
}

Therefore, from my understanding the output would be "I'm not sure I can math".

3) From my research, it seems as though the "->" operator allows you to access an object. So instead of accessing 
the array, you would be accessing the object "key1" from the array x. However, since such an object doesn't exist,
there would be an error or no output from the given code.
